 prompt = f"""Create an engaging newsletter summary with the following 6 news items. Format the response as a JSON object with the following structure:

        {{
            "title": "TOI Global Brief",
            "subtitle": "Your world. Decoded.",
            "date": "Today's Date",
            "lede": "Lede according to the news items", 
            "stories": [
                {{
                    "headline": "Create a headline for the story with some hook",
                    "what_happened": "Create a what happened section for the story",
                    "why_it_matters": "Create a why it matters section for the story",
                    "so_what": "Create a so what section for the story"
                    "msid": "msid"
                }},
                {{
                    "headline": "",
                    "what_happened": "",
                    "why_it_matters": "",
                    "so_what": ""
                    "msid": "msid"
                }},
                {{
                    "headline": "",
                    "what_happened": "",
                    "why_it_matters": "",
                    "so_what": ""
                    "msid": "msid"
                }},
                {{
                    "headline": "",
                    "what_happened": "",
                    "why_it_matters": "",
                    "so_what": ""
                    "msid": "msid"
                }},
                {{
                    "headline": "",
                    "what_happened": "",
                    "why_it_matters": "",
                    "so_what": ""
                    "msid": "msid"
                }},
                {{
                    "headline": "",
                    "what_happened": "",
                    "why_it_matters": "",
                    "so_what": ""
                    "msid": "msid"
                }}
            ]
        }}

        Here's an example of the desired style and format for each story:
        "lede": "üóûÔ∏è Welcome to 6@6 ‚Äî your daily dose of the hottest news. From GPU meltdowns sparked by Studio Ghibli magic to Lambos gone rogue in Noida, we‚Äôre serving six hot headlines at 6 o‚Äôclock ‚Äî sharp. Whether it‚Äôs Dhoni batting from the depths, global threats heating up, or a fintech founder crashing harder than crypto in 2022, 6@6 is your no-frills briefing on the madness that matters. Let's dive in."

        Example Story:
        {{
            "headline": "üé® What happened?",
            "what_happened": "Ghibli-style dreams are melting GPUs.\nAfter OpenAI rolled out dreamy image generation in ChatGPT (think Totoro meets tech), users rushed in like Spirited Away bathhouse spirits. The result? A GPU sauna. CEO Sam Altman chimed in on X (formerly known as Twitter), announcing emergency cooldowns‚Äîrate limits slapped on image requests as servers began to sweat.\n\nThen came part two of the meltdown saga. Rohan Sahai, product lead for Sora (OpenAI's text-to-video wizardry), shared that even Sora's magical movie reels were feeling the heat. \"Our GPUs are frying,\" he said, as Sora got overwhelmed by a flood of surreal, animated, AI-crafted shorts.",
            "üî•why_it_matters": "GPU overload is the AI version of \"too many cooks in the kitchen.\"\nThese tools are fun, powerful, and wildly popular‚Äîwhich is great! But also‚Ä¶ not great if your hardware starts acting like Calcifer in a bad mood. The bottleneck shows the gap between user demand and infrastructure muscle. AI might be magic, but it still needs cold, hard chips to run.",
            "üßäso_what": "Hold the prompts‚Äîcooldowns in progress.\nAltman says the limitations are temporary. Free users will get 3 image generations per day \"soon,\" once the dust settles and the GPUs stop sizzling. The Sora crew, meanwhile, is racing against time (and thermals) to stabilize the dream machine.\n\nUntil then: expect delays, be kind to your prompts, and maybe imagine your next Ghibli-inspired artwork‚Ä¶ in your head."
            "msid": "exactly the same as the msid in the news item that is passed with the news item"
        }}

        Requirements for each story:
        1. Headline: 
           - Start with a relevant emoji
           - Be concise and impactful
           - Use engaging language

        2. What happened:
           - Start with a relevant emoji
           - Write in a conversational, engaging tone
           - Use vivid language and metaphors
           - Include specific details and quotes when available
           - Break into short, digestible paragraphs
           - Use creative analogies and pop culture references when relevant

        3. Why it matters:
           - Start with a relevant emoji

           - Explain significance in an engaging way
           - Use analogies and relatable examples
           - Connect to broader implications
           - Make complex topics accessible through creative comparisons

        4. So what:
           - Start with a relevant emoji
           - Focus on India angle or broader implications
           - Use a forward-looking perspective
           - End with a thought-provoking statement or question
           - Include practical takeaways or next steps

        5. msid:
           - exactly the same as the msid in the news item that is passed with the news item
           -msid should be in the format and should be a string and should not be changed 

        Style Guidelines:
        - Use emojis strategically at the start of each section
        - Write in a conversational, engaging tone
        - Use metaphors and analogies to explain complex topics
        - Break content into short, digestible paragraphs
        - Include specific details and quotes when available
        - Make it feel like a friend explaining the news
        - Use vivid language and engaging examples
        - End sections with forward-looking statements or questions
        - Use creative analogies and pop culture references when relevant
        - Make technical topics accessible through relatable comparisons

        the output should be pure text format so its easy to parse it in the json format
        No backticks should be used in the output, just pure text
        
        News items to summarize:
        {json.dumps(news_items, indent=2)}
        """